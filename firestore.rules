rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.email == 'akalagborojohn@gmail.com' || 
         request.auth.token.email == 'nextalihq@gmail.com' ||
         request.auth.token.email == 'Mercytaye30@gmail.com' ||
         request.auth.token.email == 'estherene63@gmail.com');
    }

    // Resources collection
    match /resources/{resource} {
      allow read: if true;  // Anyone can read resources
      allow create: if request.auth != null &&  // Must be logged in to create
        request.resource.data.userId == request.auth.uid &&  // User can only create their own resources
        request.resource.data.userEmail == request.auth.token.email;  // Email must match
      allow update, delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());  // User can update/delete their own resources, admin can manage all
    }

    match /blog_posts/{post} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
      
      match /comments/{comment} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update, delete: if request.auth != null && 
          (request.auth.uid == resource.data.userId || isAdmin());
      }
    }

    match /blog_comments/{comment} {
      allow read: if true;
      allow create: if request.auth != null && 
        request.resource.data.user.id == request.auth.uid &&
        request.resource.data.content is string &&
        request.resource.data.content.size() <= 1000 &&
        request.resource.data.postId is string;
      allow update, delete: if false;
    }

    match /youtube_videos/{video} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /news/{item} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /announcements/{item} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /social_posts/{post} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /posts/{post} {
      allow read: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if request.auth != null && (resource.data.author.email == request.auth.token.email || isAdmin());
    }

    // Allow public write access to consultations collection
    match /consultations/{consultation} {
      allow create: if true; // Anyone can create a consultation
      allow read: if isAdmin(); // Only admin can read consultations
      allow update: if isAdmin(); // Only admin can update consultations
      allow delete: if isAdmin(); // Only admin can delete consultations
    }

    // Contact messages collection
    match /contact_messages/{message} {
      allow create: if true; // Anyone can create a contact message
      allow read: if isAdmin(); // Only admin can read messages
      allow update: if isAdmin(); // Only admin can update messages
      allow delete: if isAdmin(); // Only admin can delete messages
    }

    // Allow public read access to settings, but only admin can write
    match /settings/{document} {
      allow read: if true;  // Anyone can read settings
      allow write: if isAdmin();  // Only admin can modify settings
    }
    
    // Updated rules for uploaded_images collection
    match /uploaded_images/{image} {
      allow read: if true;  // Anyone can view images
      allow create: if request.auth != null && (
        // Only allow admins to upload
        isAdmin() &&
        // Validate required fields
        request.resource.data.url is string &&
        request.resource.data.title is string &&
        request.resource.data.uploadedAt is timestamp &&
        // Validate file metadata
        request.resource.data.fileType is string &&
        request.resource.data.fileSize is number &&
        // Size validation
        request.resource.data.fileSize <= 5 * 1024 * 1024 // 5MB limit
      );
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // Add rules for today_event collection
    match /today_event/{document} {
      allow read: if true;  // Anyone can read the today event
      allow write: if isAdmin();  // Only admin can write
    }
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 